/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.madwareru.intellijsignificantwhitespacelang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayDeque;import java.util.Deque;import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.madwareru.intellijsignificantwhitespacelang.language.psi.PyPasTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PyPasLexer.flex</tt>
 */
public class PyPasLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_INDENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\26\1\27\1\2\2\4\1\3\22\26\1\66\1\52\1\24\3\26\1\43\1\23\1\30\1\31\1\50"+
    "\1\47\1\37\1\17\1\21\1\1\12\16\1\36\1\26\1\53\1\51\1\54\2\26\4\15\1\22\25"+
    "\15\1\32\1\25\1\33\1\46\1\20\1\26\1\12\1\15\1\61\1\41\1\10\1\11\1\57\1\64"+
    "\1\62\2\15\1\13\1\60\1\40\1\42\1\56\1\15\1\6\1\14\1\5\1\7\1\55\1\63\1\15\1"+
    "\65\1\15\1\34\1\44\1\35\1\45\6\26\1\4\32\26\1\0\337\26\1\0\177\26\13\0\35"+
    "\26\2\4\5\26\1\0\57\26\1\0\40\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\6\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\1\1\30\1\31\5\4\1\32"+
    "\1\33\1\34\1\35\1\0\1\4\1\36\7\4\1\37"+
    "\1\4\1\5\1\40\3\0\1\41\1\0\1\42\1\4"+
    "\1\43\1\44\1\45\1\46\1\47\3\4\1\50\6\4"+
    "\1\51\2\4\1\52\1\4\1\53\1\0\2\54\1\41"+
    "\1\55\1\56\3\4\1\57\2\4\1\60\1\61\2\4"+
    "\1\40\7\4\1\62\3\4\1\63\1\64\1\65\3\4"+
    "\1\66\1\4\1\67\1\4\1\70\1\4\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\334\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\u0370\0\156\0\u03a7\0\u03de\0\156\0\156\0\156\0\156"+
    "\0\u0294\0\156\0\156\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\156\0\156\0\156\0\u05cd\0\334"+
    "\0\u0604\0\u0181\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u0181\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u0339"+
    "\0\156\0\u08cf\0\156\0\u0906\0\u0181\0\u0181\0\156\0\156"+
    "\0\156\0\u093d\0\u0974\0\u09ab\0\u0181\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0181\0\u0b2c\0\u0b63\0\u0181\0\u0b9a"+
    "\0\u0181\0\u0bd1\0\156\0\u0861\0\u0339\0\u0181\0\u0181\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0181\0\u0cad\0\u0ce4\0\u0181\0\u0181\0\u0d1b"+
    "\0\u0d52\0\u0bd1\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0181\0\u0f0a\0\u0f41\0\u0f78\0\u0181\0\u0181\0\u0181"+
    "\0\u0faf\0\u0fe6\0\u101d\0\u0181\0\u1054\0\u0181\0\u108b\0\u0181"+
    "\0\u10c2\0\u0181";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\11\1\15\1\16\1\11\1\17"+
    "\1\11\1\20\1\21\2\3\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\11\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\11\1\51\1\11\1\52"+
    "\1\53\2\11\1\22\27\54\1\55\36\54\1\56\70\0"+
    "\1\57\67\0\1\5\1\60\23\0\1\60\36\0\1\60"+
    "\5\0\1\11\1\61\10\11\1\0\1\11\1\0\1\11"+
    "\15\0\2\11\1\62\12\0\11\11\6\0\3\11\1\63"+
    "\6\11\1\0\1\11\1\0\1\11\15\0\3\11\12\0"+
    "\11\11\6\0\12\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\11\11\6\0\6\11\1\64\3\11\1\0"+
    "\1\11\1\0\1\11\15\0\1\65\2\11\12\0\11\11"+
    "\6\0\2\11\1\66\2\11\1\67\4\11\1\0\1\11"+
    "\1\0\1\11\15\0\2\11\1\70\12\0\11\11\6\0"+
    "\1\11\1\71\5\11\1\72\2\11\1\0\1\11\1\0"+
    "\1\11\15\0\1\73\2\11\12\0\11\11\17\0\1\15"+
    "\1\0\1\74\1\75\63\0\1\15\66\0\1\75\50\0"+
    "\2\76\2\0\20\76\1\0\1\77\41\76\2\100\2\0"+
    "\20\100\1\101\1\102\41\100\51\0\1\103\22\0\12\11"+
    "\1\0\1\11\1\0\1\11\15\0\2\11\1\104\12\0"+
    "\11\11\6\0\1\11\1\105\2\11\1\106\5\11\1\0"+
    "\1\11\1\0\1\11\15\0\3\11\12\0\11\11\52\0"+
    "\1\107\66\0\1\110\66\0\1\111\22\0\5\11\1\112"+
    "\4\11\1\0\1\11\1\0\1\11\15\0\3\11\12\0"+
    "\11\11\6\0\1\11\1\113\10\11\1\0\1\11\1\0"+
    "\1\11\15\0\3\11\12\0\11\11\6\0\12\11\1\0"+
    "\1\11\1\0\1\11\15\0\2\11\1\114\12\0\11\11"+
    "\6\0\4\11\1\115\5\11\1\0\1\11\1\0\1\11"+
    "\15\0\3\11\12\0\11\11\6\0\12\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\7\11\1\116\1\11"+
    "\1\0\2\57\3\0\62\57\5\0\2\11\1\117\7\11"+
    "\1\0\1\11\1\0\1\11\15\0\3\11\12\0\11\11"+
    "\6\0\1\120\11\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\4\11\1\121\4\11\6\0\7\11\1\122"+
    "\2\11\1\0\1\11\1\0\1\11\15\0\3\11\12\0"+
    "\5\11\1\123\3\11\6\0\12\11\1\0\1\11\1\0"+
    "\1\11\15\0\1\11\1\124\1\11\12\0\11\11\6\0"+
    "\12\11\1\0\1\11\1\0\1\11\15\0\1\125\2\11"+
    "\12\0\11\11\6\0\6\11\1\126\3\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\1\11"+
    "\1\127\10\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\11\11\6\0\1\11\1\130\10\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\12\11"+
    "\1\0\1\11\1\0\1\11\15\0\1\11\1\131\1\11"+
    "\12\0\11\11\17\0\1\74\1\0\1\74\56\0\1\132"+
    "\5\0\1\75\3\0\1\132\67\0\1\133\44\0\1\76"+
    "\3\0\16\76\1\134\3\76\1\0\36\76\1\0\2\100"+
    "\2\0\20\100\1\135\1\102\41\100\5\0\1\136\11\11"+
    "\1\0\1\11\1\0\1\11\15\0\3\11\12\0\11\11"+
    "\6\0\1\11\1\137\10\11\1\0\1\11\1\0\1\11"+
    "\15\0\3\11\12\0\11\11\6\0\12\11\1\0\1\11"+
    "\1\0\1\11\15\0\2\11\1\140\12\0\11\11\6\0"+
    "\12\11\1\0\1\11\1\0\1\11\15\0\1\11\1\141"+
    "\1\11\12\0\11\11\6\0\12\11\1\0\1\11\1\0"+
    "\1\11\15\0\3\11\12\0\5\11\1\142\3\11\6\0"+
    "\3\11\1\143\6\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\11\11\6\0\2\11\1\144\7\11\1\0"+
    "\1\11\1\0\1\11\15\0\3\11\12\0\11\11\6\0"+
    "\12\11\1\0\1\11\1\0\1\11\15\0\2\11\1\145"+
    "\12\0\11\11\6\0\3\11\1\146\6\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\4\11"+
    "\1\147\5\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\11\11\6\0\12\11\1\0\1\11\1\0\1\11"+
    "\15\0\3\11\12\0\4\11\1\150\4\11\6\0\7\11"+
    "\1\117\2\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\11\11\6\0\5\11\1\151\4\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\17\0\1\152"+
    "\55\0\12\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\2\11\1\153\1\11\1\154\4\11\6\0\2\11"+
    "\1\155\7\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\11\11\6\0\6\11\1\156\3\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\1\11"+
    "\1\157\10\11\1\0\1\11\1\0\1\11\15\0\3\11"+
    "\12\0\11\11\6\0\1\11\1\160\10\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\1\161"+
    "\11\11\1\0\1\11\1\0\1\11\15\0\3\11\12\0"+
    "\11\11\6\0\12\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\10\11\1\162\6\0\1\11\1\163\10\11"+
    "\1\0\1\11\1\0\1\11\15\0\3\11\12\0\11\11"+
    "\6\0\3\11\1\164\6\11\1\0\1\11\1\0\1\11"+
    "\15\0\3\11\12\0\11\11\6\0\6\11\1\165\3\11"+
    "\1\0\1\11\1\0\1\11\15\0\3\11\12\0\11\11"+
    "\6\0\3\11\1\166\6\11\1\0\1\11\1\0\1\11"+
    "\15\0\3\11\12\0\11\11\6\0\12\11\1\0\1\11"+
    "\1\0\1\11\15\0\1\167\2\11\12\0\11\11\6\0"+
    "\12\11\1\0\1\11\1\0\1\11\15\0\1\11\1\170"+
    "\1\11\12\0\11\11\6\0\12\11\1\0\1\11\1\0"+
    "\1\11\15\0\3\11\12\0\5\11\1\171\3\11\6\0"+
    "\5\11\1\172\4\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\11\11\6\0\12\11\1\0\1\11\1\0"+
    "\1\11\15\0\1\11\1\173\1\11\12\0\11\11\6\0"+
    "\3\11\1\174\6\11\1\0\1\11\1\0\1\11\15\0"+
    "\3\11\12\0\11\11\6\0\12\11\1\0\1\11\1\0"+
    "\1\11\15\0\2\11\1\175\12\0\11\11\6\0\12\11"+
    "\1\0\1\11\1\0\1\11\15\0\3\11\12\0\3\11"+
    "\1\176\5\11\6\0\2\11\1\177\7\11\1\0\1\11"+
    "\1\0\1\11\15\0\3\11\12\0\11\11\6\0\12\11"+
    "\1\0\1\11\1\0\1\11\15\0\1\200\2\11\12\0"+
    "\11\11\6\0\1\11\1\201\10\11\1\0\1\11\1\0"+
    "\1\11\15\0\3\11\12\0\11\11\6\0\3\11\1\202"+
    "\6\11\1\0\1\11\1\0\1\11\15\0\3\11\12\0"+
    "\11\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\15\1\6\11\1\1\1\11"+
    "\2\1\4\11\1\1\2\11\10\1\3\11\1\1\1\0"+
    "\15\1\3\0\1\11\1\0\1\11\3\1\3\11\20\1"+
    "\1\0\1\11\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public PyPasLexer() {
        this((java.io.Reader)null);
    }
    private boolean atBeginningOfTheLine = true;
    private Deque<Integer> indentStack = new ArrayDeque<Integer>();
    private int currentIndent = 0;
    boolean checkBol() {
        if (atBeginningOfTheLine) {
            atBeginningOfTheLine = false;
            currentIndent = 0;
            yypushback(yylength());
            yybegin(IN_INDENT);
            return true;
        }
        return false;
    }

    IElementType drainIndentStack() {
        if (!indentStack.isEmpty()) {
            indentStack.pop();
            yypushback(yylength());
            return UNINDENT;
        }
        return null;
    }

    IElementType tryIndentWithEmptyStack() {
        if (currentIndent >= 4) {
            indentStack.push(currentIndent);
            yypushback(yylength());
            yybegin(YYINITIAL);
            return INDENT;
        }
        yypushback(yylength());
        currentIndent = 0;
        yybegin(YYINITIAL);
        return WHITE_SPACE;
    }

    IElementType tryIndent(int topIndent) {
        if ((currentIndent - topIndent) >= 4) {
            indentStack.push(currentIndent);
            yypushback(yylength());
            currentIndent = 0;
            yybegin(YYINITIAL);
            return INDENT;
        }
        if ((topIndent - currentIndent) >= 4) {
            indentStack.pop();
            yypushback(yylength());
            return UNINDENT;
        }
        yypushback(yylength());
        currentIndent = 0;
        yybegin(YYINITIAL);
        return WHITE_SPACE;
    }

    IElementType handleIndentUnindent() {
        if (indentStack.isEmpty()) {
            return tryIndentWithEmptyStack();
        }
        int topIndent = indentStack.peekFirst();
        return tryIndent(topIndent);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PyPasLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return drainIndentStack();
            }  // fall though
            case 131: break;
            case IN_INDENT: {
              return drainIndentStack();
            }  // fall though
            case 132: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 2: 
            { if (!checkBol()) { return DIV; }
            } 
            // fall through
          case 59: break;
          case 3: 
            { atBeginningOfTheLine = true;
                             return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 4: 
            { if (!checkBol()) { return IDENT; }
            } 
            // fall through
          case 61: break;
          case 5: 
            { if (!checkBol()) { return INTEGER; }
            } 
            // fall through
          case 62: break;
          case 6: 
            { if (!checkBol()) { return MINUS; }
            } 
            // fall through
          case 63: break;
          case 7: 
            { if (!checkBol()) { return DOT; }
            } 
            // fall through
          case 64: break;
          case 8: 
            { if (!checkBol()) { return WHITE_SPACE; }
            } 
            // fall through
          case 65: break;
          case 9: 
            { if (!checkBol()) { return PARENTHESISL; }
            } 
            // fall through
          case 66: break;
          case 10: 
            { if (!checkBol()) { return PARENTHESISR; }
            } 
            // fall through
          case 67: break;
          case 11: 
            { if (!checkBol()) { return BRACKETL; }
            } 
            // fall through
          case 68: break;
          case 12: 
            { if (!checkBol()) { return BRACKETR; }
            } 
            // fall through
          case 69: break;
          case 13: 
            { if (!checkBol()) { return BRACEL; }
            } 
            // fall through
          case 70: break;
          case 14: 
            { if (!checkBol()) { return BRACER; }
            } 
            // fall through
          case 71: break;
          case 15: 
            { if (!checkBol()) { return COLON; }
            } 
            // fall through
          case 72: break;
          case 16: 
            { if (!checkBol()) { return COMMA; }
            } 
            // fall through
          case 73: break;
          case 17: 
            { if (!checkBol()) { return BITWISE_AND; }
            } 
            // fall through
          case 74: break;
          case 18: 
            { if (!checkBol()) { return BITWISE_OR; }
            } 
            // fall through
          case 75: break;
          case 19: 
            { if (!checkBol()) { return BITWISE_NOT; }
            } 
            // fall through
          case 76: break;
          case 20: 
            { if (!checkBol()) { return BITWISE_XOR; }
            } 
            // fall through
          case 77: break;
          case 21: 
            { if (!checkBol()) { return PLUS; }
            } 
            // fall through
          case 78: break;
          case 22: 
            { if (!checkBol()) { return MUL; }
            } 
            // fall through
          case 79: break;
          case 23: 
            { if (!checkBol()) { return EQ_OP; }
            } 
            // fall through
          case 80: break;
          case 24: 
            { if (!checkBol()) { return LT_OP; }
            } 
            // fall through
          case 81: break;
          case 25: 
            { if (!checkBol()) { return HT_OP; }
            } 
            // fall through
          case 82: break;
          case 26: 
            { return handleIndentUnindent();
            } 
            // fall through
          case 83: break;
          case 27: 
            { currentIndent += 4;
            } 
            // fall through
          case 84: break;
          case 28: 
            { currentIndent ++;
            } 
            // fall through
          case 85: break;
          case 29: 
            { if (!checkBol()) { return COMMENT; }
            } 
            // fall through
          case 86: break;
          case 30: 
            { if (!checkBol()) { return TO; }
            } 
            // fall through
          case 87: break;
          case 31: 
            { if (!checkBol()) { return AS; }
            } 
            // fall through
          case 88: break;
          case 32: 
            { if (!checkBol()) { return FLOAT; }
            } 
            // fall through
          case 89: break;
          case 33: 
            { if (!checkBol()) { return STRING; }
            } 
            // fall through
          case 90: break;
          case 34: 
            { if (!checkBol()) { return ASSIGNMENT_OP; }
            } 
            // fall through
          case 91: break;
          case 35: 
            { if (!checkBol()) { return OR; }
            } 
            // fall through
          case 92: break;
          case 36: 
            { if (!checkBol()) { return OF; }
            } 
            // fall through
          case 93: break;
          case 37: 
            { if (!checkBol()) { return NEQ_OP; }
            } 
            // fall through
          case 94: break;
          case 38: 
            { if (!checkBol()) { return LTEQ_OP; }
            } 
            // fall through
          case 95: break;
          case 39: 
            { if (!checkBol()) { return HTEQ_OP; }
            } 
            // fall through
          case 96: break;
          case 40: 
            { if (!checkBol()) { return IF; }
            } 
            // fall through
          case 97: break;
          case 41: 
            { if (!checkBol()) { return END; }
            } 
            // fall through
          case 98: break;
          case 42: 
            { if (!checkBol()) { return FOR; }
            } 
            // fall through
          case 99: break;
          case 43: 
            { if (!checkBol()) { return AND; }
            } 
            // fall through
          case 100: break;
          case 44: 
            { if (!checkBol()) { return CHAR; }
            } 
            // fall through
          case 101: break;
          case 45: 
            { if (!checkBol()) { return NOT; }
            } 
            // fall through
          case 102: break;
          case 46: 
            { if (!checkBol()) { return VAR; }
            } 
            // fall through
          case 103: break;
          case 47: 
            { if (!checkBol()) { return BOOLEAN; }
            } 
            // fall through
          case 104: break;
          case 48: 
            { if (!checkBol()) { return ELSE; }
            } 
            // fall through
          case 105: break;
          case 49: 
            { if (!checkBol()) { return ELIF; }
            } 
            // fall through
          case 106: break;
          case 50: 
            { if (!checkBol()) { return ARRAY; }
            } 
            // fall through
          case 107: break;
          case 51: 
            { if (!checkBol()) { return WHILE; }
            } 
            // fall through
          case 108: break;
          case 52: 
            { if (!checkBol()) { return RETURN; }
            } 
            // fall through
          case 109: break;
          case 53: 
            { if (!checkBol()) { return RECORD; }
            } 
            // fall through
          case 110: break;
          case 54: 
            { if (!checkBol()) { return MODULE; }
            } 
            // fall through
          case 111: break;
          case 55: 
            { if (!checkBol()) { return PROGRAM; }
            } 
            // fall through
          case 112: break;
          case 56: 
            { if (!checkBol()) { return FUNCTION; }
            } 
            // fall through
          case 113: break;
          case 57: 
            { if (!checkBol()) { return PROCEDURE; }
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
